package models

import (
	"bytes"
	"encoding/xml"
)

//
//	Send SOAP Messages Models
//
//	In difference to the Receiving models, they have the "identifier" in front of the XML name.
//	This is required to craft IEEE 11073 confrom SDC messages.
//

type SendSOAPMessage struct {
	XMLName     xml.Name       `xml:"soap12:Envelope"`
	XMLNsSoap12 string         `xml:"xmlns:soap12,attr"`
	XMLNsWsa    string         `xml:"xmlns:wsa,attr"`
	XMLNsWsd    string         `xml:"xmlns:wsd,attr"`
	XMLNsWse    string         `xml:"xmlns:wse,attr"`
	XMLNsMdpws  string         `xml:"xmlns:mdpws,attr"`
	XMLNsDpws   string         `xml:"xmlns:dpws,attr"`
	XMLNsMsg    string         `xml:"xmlns:msg,attr"`
	XMLNsPm     string         `xml:"xmlns:pm,attr"`
	XMLNsXsi    string         `xml:"xmlns:xsi,attr"`
	XMLNsMex    string         `xml:"xmlns:mex,attr"`
	XMLNsSdc    string         `xml:"xmlns:sdc,attr"`
	SOAPHeader  SendSOAPHeader `xml:"soap12:Header,omitempty"`
	SOAPBody    SendSOAPBody   `xml:"soap12:Body,omitempty"`
}

type SendSOAPHeader struct {
	XMLName        xml.Name            `xml:"soap12:Header"`
	WsaAction      string              `xml:"wsa:Action"`
	WsaTo          string              `xml:"wsa:To"`
	WsaMessageId   string              `xml:"wsa:MessageID"`
	WsaRelatesTo   string              `xml:"wsa:RelatesTo,omitempty"`
	WsdAppSequence *SendWsdAppSequence `xml:"wsd:AppSequence,omitempty"`
}

type SendSOAPBody struct {
	XMLName xml.Name    `xml:"soap12:Body"`
	Payload interface{} `xml:",omitempty"`
}

type SendWsaEndpointReference struct {
	XMLName    xml.Name `xml:"wsa:EndpointReference"`
	WsaAddress string   `xml:"wsa:Address"`
}

type SendWsdAppSequence struct {
	XMLName       xml.Name `xml:"wsd:AppSequence"`
	InstanceId    string   `xml:",attr"`
	MessageNumber string   `xml:",attr"`
}

func (msg *SendSOAPMessage) XMLMarshal() ([]byte, error) {
	// default XML header to specify encoding
	const xmlHeader = `<?xml version="1.0" encoding="UTF-8"?>` + "\n"
	// custome MobileSniper header
	const mobilesniperHeader = "<!-- Generated by MobileSniper Â© AWARE7 GmbH -->\n<!-- @ HealthNet Research Project -->\n"

	msgBytes, err := xml.Marshal(msg)
	msgBytes = []byte(xmlHeader + mobilesniperHeader + string(msgBytes))

	return msgBytes, err
}

//
//	Receive SOAP Messages Models
//
//	In difference to the Send models, they have NO "identifier" in front of the XML name.
//	This is required to parse received IEEE 11073 confrom SDC messages. The GoLang XML
//	modul is otherwise not able to parse the SDC message correctly. (Do not aks me "Whyy??!").
//

type ReceiveSOAPMessage struct {
	XMLName    xml.Name          `xml:"Envelope"`
	SOAPHeader ReceiveSOAPHeader `xml:"Header"`
	SOAPBody   ReceiveSOAPBody   `xml:"Body"`
}

type ReceiveSOAPBody struct {
	XMLName       xml.Name    `xml:"Body"`
	RawXMLPayload []byte      `xml:",innerxml"`
	Payload       interface{} `xml:",omitempty"`
}

type ReceiveSOAPHeader struct {
	XMLName        xml.Name               `xml:"Header"`
	WsaAction      string                 `xml:"Action"`
	WsaTo          string                 `xml:"To"`
	WsaMessageId   string                 `xml:"MessageID"`
	WsaRelatesTo   string                 `xml:"RelatesTo,omitempty"`
	WsdAppSequence *ReceiveWsdAppSequence `xml:"AppSequence,omitempty"`
}

type ReceiveWsaEndpointReference struct {
	XMLName    xml.Name `xml:"EndpointReference"`
	WsaAddress string   `xml:"Address"`
}

type ReceiveWsdAppSequence struct {
	XMLName       xml.Name `xml:"AppSequence"`
	InstanceId    string   `xml:",attr"`
	MessageNumber string   `xml:",attr"`
}

type RecevingSOAPBodyTypes interface {
	ProbeMatchBody | GetResponseBody
}

func XMLUnmarshal[T RecevingSOAPBodyTypes](data []byte) (ReceiveSOAPMessage, error) {
	// Reading SOAP response from XML data
	dataVal := &ReceiveSOAPMessage{}
	err := xml.Unmarshal(data, dataVal)

	if err != nil {
		return ReceiveSOAPMessage{}, err
	}

	// Reading inner XML as bytes from body
	var body T
	xmlBodyBytes := bytes.Join([][]byte{
		[]byte("<soap12:Body>"),        // definied SOAP body XML element
		dataVal.SOAPBody.RawXMLPayload, // inner XML of XML data
		[]byte("</soap12:Body>"),
	}, []byte(""))

	err = xml.Unmarshal(xmlBodyBytes, &body)

	if err != nil {
		return ReceiveSOAPMessage{}, err
	}

	return ReceiveSOAPMessage{
		SOAPHeader: dataVal.SOAPHeader,
		SOAPBody: ReceiveSOAPBody{
			Payload: body,
		},
	}, nil
}
