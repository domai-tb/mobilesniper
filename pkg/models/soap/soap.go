package models

import (
	"encoding/xml"

	"github.com/google/uuid"
)

type SOAPMessage struct {
	XMLName     xml.Name `xml:"soap12:Envelope"`
	XMLNsSoap12 string   `xml:"xmlns:soap12,attr"`
	XMLNsWsa    string   `xml:"xmlns:wsa,attr"`
	XMLNsWsd    string   `xml:"xmlns:wsd,attr"`
	XMLNsWse    string   `xml:"xmlns:wse,attr"`
	XMLNsMdpws  string   `xml:"xmlns:mdpws,attr"`
	XMLNsDpws   string   `xml:"xmlns:dpws,attr"`
	XMLNsMsg    string   `xml:"xmlns:msg,attr"`
	XMLNsPm     string   `xml:"xmlns:pm,attr"`
	XMLNsXsi    string   `xml:"xmlns:xsi,attr"`
	XMLNsMex    string   `xml:"xmlns:mex,attr"`
	XMLNsSdc    string   `xml:"xmlns:sdc,attr"`
	SOAPHeader  SOAPHeader
	SOAPBody    SOAPBody
}

type SOAPHeader struct {
	XMLName   xml.Name `xml:"soap12:Header"`
	WsaAction string   `xml:"wsa:Action"`
	WsaTo     string   `xml:"wsa:To"`
	// WsaRelatesTo     string   `xml:"wsa:RelatesTo"`
	WsaMessageId string `xml:"wsa:MessageID"`
	// WsdAppSequence   string   `xml:"wsd:AppSequence"`
	// WsdInstanceId    string   `xml:"InstanceId,attr"`
	// WsdMessageNumber string   `xml:"MessageNumber,attr"`
}

type SOAPBody struct {
	XMLName xml.Name `xml:"soap12:Body"`
	Payload interface{}
}

func NewSOAPMessage(wsaAction, wsaTo string, body SOAPBody) SOAPMessage {
	return SOAPMessage{
		XMLNsSoap12: "http://www.w3.org/2003/05/soap-envelope",
		XMLNsWsa:    "http://www.w3.org/2005/08/addressing",
		XMLNsWsd:    "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
		XMLNsWse:    "http://schemas.xmlsoap.org/ws/2004/08/eventing",
		XMLNsMdpws:  "http://standards.ieee.org/downloads/11073/11073-20702-2016",
		XMLNsDpws:   "http://docs.oasis-open.org/ws-dd/ns/dpws/2009/01",
		XMLNsMsg:    "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
		XMLNsPm:     "http://standards.ieee.org/downloads/11073/11073-10207-2017/participant",
		XMLNsXsi:    "http://www.w3.org/2001/XMLSchema-instance",
		XMLNsMex:    "http://schemas.xmlsoap.org/ws/2004/09/mex",
		XMLNsSdc:    "http://standards.ieee.org/downloads/11073/11073-20701-2018",
		SOAPHeader: SOAPHeader{
			WsaAction:    wsaAction,
			WsaTo:        wsaTo,
			WsaMessageId: uuid.NewString(),
		},
		SOAPBody: body,
	}
}

func NewProbeSOAPBody() SOAPBody {

	var probePayload struct {
		XMLName   xml.Name `xml:"wsd:Probe"`
		WsdType   string   `xml:"wsd:Types"`
		WsdScopes string   `xml:"wsd:Scopes"`
	}

	probePayload.WsdType = "dpws:Device mdpws:MedicalDevice"
	probePayload.WsdScopes = "sdc.cdc.type:///130535 sdc.ctxt.loc:/sdc.ctxt.loc.detail/DWHL%2F%2F%2FF05%2F%2FTKl?fac=DWHL&amp;poc=F05&amp;bed=TKl"

	return SOAPBody{Payload: probePayload}
}

func NewGetSOAPBody() SOAPBody {
	// A Get message has an empty body.
	return SOAPBody{}
}

func (msg *SOAPMessage) XMLMarshal() ([]byte, error) {
	const xmlHeader = `<?xml version="1.0" encoding="UTF-8"?>` + "\n"
	const mobilesniperHeader = "<!-- Generated by MobileSniper Â© AWARE7 GmbH -->\n<!-- @ HealthNet Research Project -->\n"

	msgBytes, err := xml.Marshal(msg)
	msgBytes = []byte(xmlHeader + mobilesniperHeader + string(msgBytes))

	return msgBytes, err
}
